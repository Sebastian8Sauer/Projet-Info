declare
fun {FlatPartition Partition}
   local
      fun{DurationChange NewTime Part}
	 local FlatPart in                        % Toutes les transformations doivent renvoyer une <flat partition>
	    FlatPart = {FlatPartition Part}
	    local Time in                            % duree de la partition
	       Time = {Duration FlatPart}
	       local NewTimeF in                      % facteur par lequel il faut multiplier tout duration
		  NewTimeF = (NewTime/Time)

		  {DurationChangeFactor NewTimeF FlatPart}
	       end
	    end
	 end
      end
   in
      case Partition of H|T
      then
	 if {IsList H}
	 then
	    if{IsExtendedChord H}
	    then H|{FlatPartition T}
	    else {ChordToExtended H}|{FlatPartition T}
	    end
	 elseif {IsNote H}
         then {NoteToExtended H}|{FlatPartition T}
      
	 elseif {IsExtendedNote H}
	 then H|{FlatPartition T}

	 else
	    case H of duration(seconds:X Part)
	    then {DurationChange X Part}|{FlatPartition T}
	    else false
	    end
	 end
      []nil then nil
      else false
      end
   end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TEST TEST TEST

declare N1 N2 N3 N4 N5 in
N1 = a
N2 = d#3
N3 = silence
N4 = silence(duration:0.0)
N5 = note(name:c octave:7 sharp:false duration:3.1 instrument:none)

declare C1 C2 in
C1 = [b2 b3 b4]
C2 = [note(name:e octave:1 sharp:false duration:2.0 instrument:none)note(name:g octave:6 sharp:false duration:2.0 instrument:none)]

declare
P = [a1 a2 N5]

declare
T1 = duration(seconds:10.0 P)

declare
Part = [N1 N2 N3 N4 N5 C1 C2 T1]

{Browse {FlatPartition Part}}
